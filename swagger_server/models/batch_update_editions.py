# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BatchUpdateEditions(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        avatar_wearable_id: int = None,
        short_word: str = None,
        collection_id: int = None,
        file_list: List[str] = None,
    ):  # noqa: E501
        """BatchUpdateEditions - a model defined in Swagger

        :param avatar_wearable_id: The avatar_wearable_id of this BatchUpdateEditions.  # noqa: E501
        :type avatar_wearable_id: int
        :param short_word: The short_word of this BatchUpdateEditions.  # noqa: E501
        :type short_word: str
        :param collection_id: The collection_id of this BatchUpdateEditions.  # noqa: E501
        :type collection_id: int
        :param file_list: The file_list of this BatchUpdateEditions.  # noqa: E501
        :type file_list: List[str]
        """
        self.swagger_types = {
            "avatar_wearable_id": int,
            "short_word": str,
            "collection_id": int,
            "file_list": List[str],
        }

        self.attribute_map = {
            "avatar_wearable_id": "avatar_wearable_id",
            "short_word": "short_word",
            "collection_id": "collection_id",
            "file_list": "file_list",
        }
        self._avatar_wearable_id = avatar_wearable_id
        self._short_word = short_word
        self._collection_id = collection_id
        self._file_list = file_list

    @classmethod
    def from_dict(cls, dikt) -> "BatchUpdateEditions":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BatchUpdateEditions of this BatchUpdateEditions.  # noqa: E501
        :rtype: BatchUpdateEditions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_wearable_id(self) -> int:
        """Gets the avatar_wearable_id of this BatchUpdateEditions.


        :return: The avatar_wearable_id of this BatchUpdateEditions.
        :rtype: int
        """
        return self._avatar_wearable_id

    @avatar_wearable_id.setter
    def avatar_wearable_id(self, avatar_wearable_id: int):
        """Sets the avatar_wearable_id of this BatchUpdateEditions.


        :param avatar_wearable_id: The avatar_wearable_id of this BatchUpdateEditions.
        :type avatar_wearable_id: int
        """
        if avatar_wearable_id is None:
            raise ValueError(
                "Invalid value for `avatar_wearable_id`, must not be `None`"
            )  # noqa: E501

        self._avatar_wearable_id = avatar_wearable_id

    @property
    def short_word(self) -> str:
        """Gets the short_word of this BatchUpdateEditions.


        :return: The short_word of this BatchUpdateEditions.
        :rtype: str
        """
        return self._short_word

    @short_word.setter
    def short_word(self, short_word: str):
        """Sets the short_word of this BatchUpdateEditions.


        :param short_word: The short_word of this BatchUpdateEditions.
        :type short_word: str
        """
        if short_word is None:
            raise ValueError(
                "Invalid value for `short_word`, must not be `None`"
            )  # noqa: E501

        self._short_word = short_word

    @property
    def collection_id(self) -> int:
        """Gets the collection_id of this BatchUpdateEditions.


        :return: The collection_id of this BatchUpdateEditions.
        :rtype: int
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id: int):
        """Sets the collection_id of this BatchUpdateEditions.


        :param collection_id: The collection_id of this BatchUpdateEditions.
        :type collection_id: int
        """
        if collection_id is None:
            raise ValueError(
                "Invalid value for `collection_id`, must not be `None`"
            )  # noqa: E501

        self._collection_id = collection_id

    @property
    def file_list(self) -> List[str]:
        """Gets the file_list of this BatchUpdateEditions.


        :return: The file_list of this BatchUpdateEditions.
        :rtype: List[str]
        """
        return self._file_list

    @file_list.setter
    def file_list(self, file_list: List[str]):
        """Sets the file_list of this BatchUpdateEditions.


        :param file_list: The file_list of this BatchUpdateEditions.
        :type file_list: List[str]
        """
        if file_list is None:
            raise ValueError(
                "Invalid value for `file_list`, must not be `None`"
            )  # noqa: E501

        self._file_list = file_list
