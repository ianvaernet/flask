# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.base_edition import BaseEdition  # noqa: F401,E501
from swagger_server.models.edition_off_chain_metadata import (
    EditionOffChainMetadata,
)  # noqa: F401,E501
from swagger_server.models.edition_on_chain_metadata import (
    EditionOnChainMetadata,
)  # noqa: F401,E501
from swagger_server.models.edition_status import EditionStatus  # noqa: F401,E501
from swagger_server import util


class EditionListable(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        name: str = None,
        off_chain_metadata: EditionOffChainMetadata = None,
        publish_time: datetime = None,
        avatar_wearable_id: int = None,
        id: int = None,
        on_chain_metadata: EditionOnChainMetadata = None,
        status: EditionStatus = None,
        price: str = None,
        reserve_percentage: str = None,
        nfts_minted: int = None,
        nfts_for_sale: int = None,
    ):  # noqa: E501
        """EditionListable - a model defined in Swagger

        :param name: The name of this EditionListable.  # noqa: E501
        :type name: str
        :param off_chain_metadata: The off_chain_metadata of this EditionListable.  # noqa: E501
        :type off_chain_metadata: EditionOffChainMetadata
        :param publish_time: The publish_time of this EditionListable.  # noqa: E501
        :type publish_time: datetime
        :param avatar_wearable_id: The avatar_wearable_id of this EditionListable.  # noqa: E501
        :type avatar_wearable_id: int
        :param id: The id of this EditionListable.  # noqa: E501
        :type id: int
        :param on_chain_metadata: The on_chain_metadata of this EditionListable.  # noqa: E501
        :type on_chain_metadata: EditionOnChainMetadata
        :param status: The status of this EditionListable.  # noqa: E501
        :type status: EditionStatus
        :param price: The price of this EditionListable.  # noqa: E501
        :type price: str
        :param reserve_percentage: The reserve_percentage of this EditionListable.  # noqa: E501
        :type reserve_percentage: str
        :param nfts_minted: The nfts_minted of this EditionListable.  # noqa: E501
        :type nfts_minted: int
        :param nfts_for_sale: The nfts_for_sale of this EditionListable.  # noqa: E501
        :type nfts_for_sale: int
        """
        self.swagger_types = {
            "name": str,
            "off_chain_metadata": EditionOffChainMetadata,
            "publish_time": datetime,
            "avatar_wearable_id": int,
            "id": int,
            "on_chain_metadata": EditionOnChainMetadata,
            "status": EditionStatus,
            "price": str,
            "reserve_percentage": str,
            "nfts_minted": int,
            "nfts_for_sale": int,
        }

        self.attribute_map = {
            "name": "name",
            "off_chain_metadata": "off_chain_metadata",
            "publish_time": "publish_time",
            "avatar_wearable_id": "avatar_wearable_id",
            "id": "id",
            "on_chain_metadata": "on_chain_metadata",
            "status": "status",
            "price": "price",
            "reserve_percentage": "reserve_percentage",
            "nfts_minted": "nfts_minted",
            "nfts_for_sale": "nfts_for_sale",
        }
        self._name = name
        self._off_chain_metadata = off_chain_metadata
        self._publish_time = publish_time
        self._avatar_wearable_id = avatar_wearable_id
        self._id = id
        self._on_chain_metadata = on_chain_metadata
        self._status = status
        self._price = price
        self._reserve_percentage = reserve_percentage
        self._nfts_minted = nfts_minted
        self._nfts_for_sale = nfts_for_sale

    @classmethod
    def from_dict(cls, dikt) -> "EditionListable":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EditionListable of this EditionListable.  # noqa: E501
        :rtype: EditionListable
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this EditionListable.


        :return: The name of this EditionListable.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this EditionListable.


        :param name: The name of this EditionListable.
        :type name: str
        """

        self._name = name

    @property
    def off_chain_metadata(self) -> EditionOffChainMetadata:
        """Gets the off_chain_metadata of this EditionListable.


        :return: The off_chain_metadata of this EditionListable.
        :rtype: EditionOffChainMetadata
        """
        return self._off_chain_metadata

    @off_chain_metadata.setter
    def off_chain_metadata(self, off_chain_metadata: EditionOffChainMetadata):
        """Sets the off_chain_metadata of this EditionListable.


        :param off_chain_metadata: The off_chain_metadata of this EditionListable.
        :type off_chain_metadata: EditionOffChainMetadata
        """

        self._off_chain_metadata = off_chain_metadata

    @property
    def publish_time(self) -> datetime:
        """Gets the publish_time of this EditionListable.


        :return: The publish_time of this EditionListable.
        :rtype: datetime
        """
        return self._publish_time

    @publish_time.setter
    def publish_time(self, publish_time: datetime):
        """Sets the publish_time of this EditionListable.


        :param publish_time: The publish_time of this EditionListable.
        :type publish_time: datetime
        """

        self._publish_time = publish_time

    @property
    def avatar_wearable_id(self) -> int:
        """Gets the avatar_wearable_id of this EditionListable.


        :return: The avatar_wearable_id of this EditionListable.
        :rtype: int
        """
        return self._avatar_wearable_id

    @avatar_wearable_id.setter
    def avatar_wearable_id(self, avatar_wearable_id: int):
        """Sets the avatar_wearable_id of this EditionListable.


        :param avatar_wearable_id: The avatar_wearable_id of this EditionListable.
        :type avatar_wearable_id: int
        """

        self._avatar_wearable_id = avatar_wearable_id

    @property
    def id(self) -> int:
        """Gets the id of this EditionListable.


        :return: The id of this EditionListable.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this EditionListable.


        :param id: The id of this EditionListable.
        :type id: int
        """

        self._id = id

    @property
    def on_chain_metadata(self) -> EditionOnChainMetadata:
        """Gets the on_chain_metadata of this EditionListable.


        :return: The on_chain_metadata of this EditionListable.
        :rtype: EditionOnChainMetadata
        """
        return self._on_chain_metadata

    @on_chain_metadata.setter
    def on_chain_metadata(self, on_chain_metadata: EditionOnChainMetadata):
        """Sets the on_chain_metadata of this EditionListable.


        :param on_chain_metadata: The on_chain_metadata of this EditionListable.
        :type on_chain_metadata: EditionOnChainMetadata
        """

        self._on_chain_metadata = on_chain_metadata

    @property
    def status(self) -> EditionStatus:
        """Gets the status of this EditionListable.


        :return: The status of this EditionListable.
        :rtype: EditionStatus
        """
        return self._status

    @status.setter
    def status(self, status: EditionStatus):
        """Sets the status of this EditionListable.


        :param status: The status of this EditionListable.
        :type status: EditionStatus
        """

        self._status = status

    @property
    def price(self) -> str:
        """Gets the price of this EditionListable.


        :return: The price of this EditionListable.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price: str):
        """Sets the price of this EditionListable.


        :param price: The price of this EditionListable.
        :type price: str
        """

        self._price = price

    @property
    def reserve_percentage(self) -> str:
        """Gets the reserve_percentage of this EditionListable.


        :return: The reserve_percentage of this EditionListable.
        :rtype: str
        """
        return self._reserve_percentage

    @reserve_percentage.setter
    def reserve_percentage(self, reserve_percentage: str):
        """Sets the reserve_percentage of this EditionListable.


        :param reserve_percentage: The reserve_percentage of this EditionListable.
        :type reserve_percentage: str
        """

        self._reserve_percentage = reserve_percentage

    @property
    def nfts_minted(self) -> int:
        """Gets the nfts_minted of this EditionListable.


        :return: The nfts_minted of this EditionListable.
        :rtype: int
        """
        return self._nfts_minted

    @nfts_minted.setter
    def nfts_minted(self, nfts_minted: int):
        """Sets the nfts_minted of this EditionListable.


        :param nfts_minted: The nfts_minted of this EditionListable.
        :type nfts_minted: int
        """

        self._nfts_minted = nfts_minted

    @property
    def nfts_for_sale(self) -> int:
        """Gets the nfts_for_sale of this EditionListable.


        :return: The nfts_for_sale of this EditionListable.
        :rtype: int
        """
        return self._nfts_for_sale

    @nfts_for_sale.setter
    def nfts_for_sale(self, nfts_for_sale: int):
        """Sets the nfts_for_sale of this EditionListable.


        :param nfts_for_sale: The nfts_for_sale of this EditionListable.
        :type nfts_for_sale: int
        """

        self._nfts_for_sale = nfts_for_sale
