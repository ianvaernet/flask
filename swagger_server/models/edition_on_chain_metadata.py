# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class EditionOnChainMetadata(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        artist: str = None,
        avatar_wearable_sku: str = None,
        celebrity: str = None,
        design_slot: str = None,
        publisher: str = None,
        rarity: str = None,
        trademark: str = None,
        type: str = None,
    ):  # noqa: E501
        """EditionOnChainMetadata - a model defined in Swagger

        :param artist: The artist of this EditionOnChainMetadata.  # noqa: E501
        :type artist: str
        :param avatar_wearable_sku: The avatar_wearable_sku of this EditionOnChainMetadata.  # noqa: E501
        :type avatar_wearable_sku: str
        :param celebrity: The celebrity of this EditionOnChainMetadata.  # noqa: E501
        :type celebrity: str
        :param design_slot: The design_slot of this EditionOnChainMetadata.  # noqa: E501
        :type design_slot: str
        :param publisher: The publisher of this EditionOnChainMetadata.  # noqa: E501
        :type publisher: str
        :param rarity: The rarity of this EditionOnChainMetadata.  # noqa: E501
        :type rarity: str
        :param trademark: The trademark of this EditionOnChainMetadata.  # noqa: E501
        :type trademark: str
        :param type: The type of this EditionOnChainMetadata.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            "artist": str,
            "avatar_wearable_sku": str,
            "celebrity": str,
            "design_slot": str,
            "publisher": str,
            "rarity": str,
            "trademark": str,
            "type": str,
        }

        self.attribute_map = {
            "artist": "artist",
            "avatar_wearable_sku": "avatar_wearable_sku",
            "celebrity": "celebrity",
            "design_slot": "design_slot",
            "publisher": "publisher",
            "rarity": "rarity",
            "trademark": "trademark",
            "type": "type",
        }
        self._artist = artist
        self._avatar_wearable_sku = avatar_wearable_sku
        self._celebrity = celebrity
        self._design_slot = design_slot
        self._publisher = publisher
        self._rarity = rarity
        self._trademark = trademark
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> "EditionOnChainMetadata":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EditionOnChainMetadata of this EditionOnChainMetadata.  # noqa: E501
        :rtype: EditionOnChainMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artist(self) -> str:
        """Gets the artist of this EditionOnChainMetadata.


        :return: The artist of this EditionOnChainMetadata.
        :rtype: str
        """
        return self._artist

    @artist.setter
    def artist(self, artist: str):
        """Sets the artist of this EditionOnChainMetadata.


        :param artist: The artist of this EditionOnChainMetadata.
        :type artist: str
        """

        self._artist = artist

    @property
    def avatar_wearable_sku(self) -> str:
        """Gets the avatar_wearable_sku of this EditionOnChainMetadata.


        :return: The avatar_wearable_sku of this EditionOnChainMetadata.
        :rtype: str
        """
        return self._avatar_wearable_sku

    @avatar_wearable_sku.setter
    def avatar_wearable_sku(self, avatar_wearable_sku: str):
        """Sets the avatar_wearable_sku of this EditionOnChainMetadata.


        :param avatar_wearable_sku: The avatar_wearable_sku of this EditionOnChainMetadata.
        :type avatar_wearable_sku: str
        """

        self._avatar_wearable_sku = avatar_wearable_sku

    @property
    def celebrity(self) -> str:
        """Gets the celebrity of this EditionOnChainMetadata.


        :return: The celebrity of this EditionOnChainMetadata.
        :rtype: str
        """
        return self._celebrity

    @celebrity.setter
    def celebrity(self, celebrity: str):
        """Sets the celebrity of this EditionOnChainMetadata.


        :param celebrity: The celebrity of this EditionOnChainMetadata.
        :type celebrity: str
        """

        self._celebrity = celebrity

    @property
    def design_slot(self) -> str:
        """Gets the design_slot of this EditionOnChainMetadata.


        :return: The design_slot of this EditionOnChainMetadata.
        :rtype: str
        """
        return self._design_slot

    @design_slot.setter
    def design_slot(self, design_slot: str):
        """Sets the design_slot of this EditionOnChainMetadata.


        :param design_slot: The design_slot of this EditionOnChainMetadata.
        :type design_slot: str
        """

        self._design_slot = design_slot

    @property
    def publisher(self) -> str:
        """Gets the publisher of this EditionOnChainMetadata.


        :return: The publisher of this EditionOnChainMetadata.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher: str):
        """Sets the publisher of this EditionOnChainMetadata.


        :param publisher: The publisher of this EditionOnChainMetadata.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def rarity(self) -> str:
        """Gets the rarity of this EditionOnChainMetadata.


        :return: The rarity of this EditionOnChainMetadata.
        :rtype: str
        """
        return self._rarity

    @rarity.setter
    def rarity(self, rarity: str):
        """Sets the rarity of this EditionOnChainMetadata.


        :param rarity: The rarity of this EditionOnChainMetadata.
        :type rarity: str
        """

        self._rarity = rarity

    @property
    def trademark(self) -> str:
        """Gets the trademark of this EditionOnChainMetadata.


        :return: The trademark of this EditionOnChainMetadata.
        :rtype: str
        """
        return self._trademark

    @trademark.setter
    def trademark(self, trademark: str):
        """Sets the trademark of this EditionOnChainMetadata.


        :param trademark: The trademark of this EditionOnChainMetadata.
        :type trademark: str
        """

        self._trademark = trademark

    @property
    def type(self) -> str:
        """Gets the type of this EditionOnChainMetadata.


        :return: The type of this EditionOnChainMetadata.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this EditionOnChainMetadata.


        :param type: The type of this EditionOnChainMetadata.
        :type type: str
        """

        self._type = type
