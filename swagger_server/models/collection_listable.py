# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.base_collection import BaseCollection  # noqa: F401,E501
from swagger_server.models.collection_off_chain_metadata import (
    CollectionOffChainMetadata,
)  # noqa: F401,E501
from swagger_server.models.collection_status import CollectionStatus  # noqa: F401,E501
from swagger_server.models.serie_listable import SerieListable  # noqa: F401,E501
from swagger_server import util


class CollectionListable(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        name: str = None,
        off_chain_metadata: CollectionOffChainMetadata = None,
        short_word: str = None,
        publish_time: datetime = None,
        id: int = None,
        status: CollectionStatus = None,
        serie: SerieListable = None,
        wearables_count: int = None,
    ):  # noqa: E501
        """CollectionListable - a model defined in Swagger

        :param name: The name of this CollectionListable.  # noqa: E501
        :type name: str
        :param off_chain_metadata: The off_chain_metadata of this CollectionListable.  # noqa: E501
        :type off_chain_metadata: CollectionOffChainMetadata
        :param short_word: The short_word of this CollectionListable.  # noqa: E501
        :type short_word: str
        :param publish_time: The publish_time of this CollectionListable.  # noqa: E501
        :type publish_time: datetime
        :param id: The id of this CollectionListable.  # noqa: E501
        :type id: int
        :param status: The status of this CollectionListable.  # noqa: E501
        :type status: CollectionStatus
        :param serie: The serie of this CollectionListable.  # noqa: E501
        :type serie: SerieListable
        :param wearables_count: The wearables_count of this CollectionListable.  # noqa: E501
        :type wearables_count: int
        """
        self.swagger_types = {
            "name": str,
            "off_chain_metadata": CollectionOffChainMetadata,
            "short_word": str,
            "publish_time": datetime,
            "id": int,
            "status": CollectionStatus,
            "serie": SerieListable,
            "wearables_count": int,
        }

        self.attribute_map = {
            "name": "name",
            "off_chain_metadata": "off_chain_metadata",
            "short_word": "short_word",
            "publish_time": "publish_time",
            "id": "id",
            "status": "status",
            "serie": "serie",
            "wearables_count": "wearables_count",
        }
        self._name = name
        self._off_chain_metadata = off_chain_metadata
        self._short_word = short_word
        self._publish_time = publish_time
        self._id = id
        self._status = status
        self._serie = serie
        self._wearables_count = wearables_count

    @classmethod
    def from_dict(cls, dikt) -> "CollectionListable":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CollectionListable of this CollectionListable.  # noqa: E501
        :rtype: CollectionListable
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this CollectionListable.


        :return: The name of this CollectionListable.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CollectionListable.


        :param name: The name of this CollectionListable.
        :type name: str
        """

        self._name = name

    @property
    def off_chain_metadata(self) -> CollectionOffChainMetadata:
        """Gets the off_chain_metadata of this CollectionListable.


        :return: The off_chain_metadata of this CollectionListable.
        :rtype: CollectionOffChainMetadata
        """
        return self._off_chain_metadata

    @off_chain_metadata.setter
    def off_chain_metadata(self, off_chain_metadata: CollectionOffChainMetadata):
        """Sets the off_chain_metadata of this CollectionListable.


        :param off_chain_metadata: The off_chain_metadata of this CollectionListable.
        :type off_chain_metadata: CollectionOffChainMetadata
        """

        self._off_chain_metadata = off_chain_metadata

    @property
    def short_word(self) -> str:
        """Gets the short_word of this CollectionListable.


        :return: The short_word of this CollectionListable.
        :rtype: str
        """
        return self._short_word

    @short_word.setter
    def short_word(self, short_word: str):
        """Sets the short_word of this CollectionListable.


        :param short_word: The short_word of this CollectionListable.
        :type short_word: str
        """

        self._short_word = short_word

    @property
    def publish_time(self) -> datetime:
        """Gets the publish_time of this CollectionListable.


        :return: The publish_time of this CollectionListable.
        :rtype: datetime
        """
        return self._publish_time

    @publish_time.setter
    def publish_time(self, publish_time: datetime):
        """Sets the publish_time of this CollectionListable.


        :param publish_time: The publish_time of this CollectionListable.
        :type publish_time: datetime
        """

        self._publish_time = publish_time

    @property
    def id(self) -> int:
        """Gets the id of this CollectionListable.


        :return: The id of this CollectionListable.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this CollectionListable.


        :param id: The id of this CollectionListable.
        :type id: int
        """

        self._id = id

    @property
    def status(self) -> CollectionStatus:
        """Gets the status of this CollectionListable.


        :return: The status of this CollectionListable.
        :rtype: CollectionStatus
        """
        return self._status

    @status.setter
    def status(self, status: CollectionStatus):
        """Sets the status of this CollectionListable.


        :param status: The status of this CollectionListable.
        :type status: CollectionStatus
        """

        self._status = status

    @property
    def serie(self) -> SerieListable:
        """Gets the serie of this CollectionListable.


        :return: The serie of this CollectionListable.
        :rtype: SerieListable
        """
        return self._serie

    @serie.setter
    def serie(self, serie: SerieListable):
        """Sets the serie of this CollectionListable.


        :param serie: The serie of this CollectionListable.
        :type serie: SerieListable
        """

        self._serie = serie

    @property
    def wearables_count(self) -> int:
        """Gets the wearables_count of this CollectionListable.

        The amount of wearables in the Collection (cannot be deleted if this is > 0)  # noqa: E501

        :return: The wearables_count of this CollectionListable.
        :rtype: int
        """
        return self._wearables_count

    @wearables_count.setter
    def wearables_count(self, wearables_count: int):
        """Sets the wearables_count of this CollectionListable.

        The amount of wearables in the Collection (cannot be deleted if this is > 0)  # noqa: E501

        :param wearables_count: The wearables_count of this CollectionListable.
        :type wearables_count: int
        """

        self._wearables_count = wearables_count
