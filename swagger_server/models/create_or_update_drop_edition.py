# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CreateOrUpdateDropEdition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, edition_id: int = None, price: float = None):  # noqa: E501
        """CreateOrUpdateDropEdition - a model defined in Swagger

        :param edition_id: The edition_id of this CreateOrUpdateDropEdition.  # noqa: E501
        :type edition_id: int
        :param price: The price of this CreateOrUpdateDropEdition.  # noqa: E501
        :type price: float
        """
        self.swagger_types = {"edition_id": int, "price": float}

        self.attribute_map = {"edition_id": "edition_id", "price": "price"}
        self._edition_id = edition_id
        self._price = price

    @classmethod
    def from_dict(cls, dikt) -> "CreateOrUpdateDropEdition":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateOrUpdateDropEdition of this CreateOrUpdateDropEdition.  # noqa: E501
        :rtype: CreateOrUpdateDropEdition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def edition_id(self) -> int:
        """Gets the edition_id of this CreateOrUpdateDropEdition.


        :return: The edition_id of this CreateOrUpdateDropEdition.
        :rtype: int
        """
        return self._edition_id

    @edition_id.setter
    def edition_id(self, edition_id: int):
        """Sets the edition_id of this CreateOrUpdateDropEdition.


        :param edition_id: The edition_id of this CreateOrUpdateDropEdition.
        :type edition_id: int
        """
        if edition_id is None:
            raise ValueError(
                "Invalid value for `edition_id`, must not be `None`"
            )  # noqa: E501

        self._edition_id = edition_id

    @property
    def price(self) -> float:
        """Gets the price of this CreateOrUpdateDropEdition.


        :return: The price of this CreateOrUpdateDropEdition.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this CreateOrUpdateDropEdition.


        :param price: The price of this CreateOrUpdateDropEdition.
        :type price: float
        """
        if price is None:
            raise ValueError(
                "Invalid value for `price`, must not be `None`"
            )  # noqa: E501

        self._price = price
