# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.nft_status import NftStatus  # noqa: F401,E501
from swagger_server import util


class Nft(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        id: int = None,
        serial_number: int = None,
        reserved: bool = None,
        status: NftStatus = None,
        avatar_wearable_sku: str = None,
        edition_name: str = None,
    ):  # noqa: E501
        """Nft - a model defined in Swagger

        :param id: The id of this Nft.  # noqa: E501
        :type id: int
        :param serial_number: The serial_number of this Nft.  # noqa: E501
        :type serial_number: int
        :param reserved: The reserved of this Nft.  # noqa: E501
        :type reserved: bool
        :param status: The status of this Nft.  # noqa: E501
        :type status: NftStatus
        :param avatar_wearable_sku: The avatar_wearable_sku of this Nft.  # noqa: E501
        :type avatar_wearable_sku: str
        :param edition_name: The edition_name of this Nft.  # noqa: E501
        :type edition_name: str
        """
        self.swagger_types = {
            "id": int,
            "serial_number": int,
            "reserved": bool,
            "status": NftStatus,
            "avatar_wearable_sku": str,
            "edition_name": str,
        }

        self.attribute_map = {
            "id": "id",
            "serial_number": "serial_number",
            "reserved": "reserved",
            "status": "status",
            "avatar_wearable_sku": "avatar_wearable_sku",
            "edition_name": "edition_name",
        }
        self._id = id
        self._serial_number = serial_number
        self._reserved = reserved
        self._status = status
        self._avatar_wearable_sku = avatar_wearable_sku
        self._edition_name = edition_name

    @classmethod
    def from_dict(cls, dikt) -> "Nft":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Nft of this Nft.  # noqa: E501
        :rtype: Nft
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Nft.


        :return: The id of this Nft.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Nft.


        :param id: The id of this Nft.
        :type id: int
        """

        self._id = id

    @property
    def serial_number(self) -> int:
        """Gets the serial_number of this Nft.


        :return: The serial_number of this Nft.
        :rtype: int
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number: int):
        """Sets the serial_number of this Nft.


        :param serial_number: The serial_number of this Nft.
        :type serial_number: int
        """

        self._serial_number = serial_number

    @property
    def reserved(self) -> bool:
        """Gets the reserved of this Nft.


        :return: The reserved of this Nft.
        :rtype: bool
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved: bool):
        """Sets the reserved of this Nft.


        :param reserved: The reserved of this Nft.
        :type reserved: bool
        """

        self._reserved = reserved

    @property
    def status(self) -> NftStatus:
        """Gets the status of this Nft.


        :return: The status of this Nft.
        :rtype: NftStatus
        """
        return self._status

    @status.setter
    def status(self, status: NftStatus):
        """Sets the status of this Nft.


        :param status: The status of this Nft.
        :type status: NftStatus
        """

        self._status = status

    @property
    def avatar_wearable_sku(self) -> str:
        """Gets the avatar_wearable_sku of this Nft.


        :return: The avatar_wearable_sku of this Nft.
        :rtype: str
        """
        return self._avatar_wearable_sku

    @avatar_wearable_sku.setter
    def avatar_wearable_sku(self, avatar_wearable_sku: str):
        """Sets the avatar_wearable_sku of this Nft.


        :param avatar_wearable_sku: The avatar_wearable_sku of this Nft.
        :type avatar_wearable_sku: str
        """

        self._avatar_wearable_sku = avatar_wearable_sku

    @property
    def edition_name(self) -> str:
        """Gets the edition_name of this Nft.


        :return: The edition_name of this Nft.
        :rtype: str
        """
        return self._edition_name

    @edition_name.setter
    def edition_name(self, edition_name: str):
        """Sets the edition_name of this Nft.


        :param edition_name: The edition_name of this Nft.
        :type edition_name: str
        """

        self._edition_name = edition_name
