# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class EditionError(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        id: int = None,
        edition_id: int = None,
        error_date: datetime = None,
        type: str = None,
        error: str = None,
        suggested_solution: str = None,
    ):  # noqa: E501
        """EditionError - a model defined in Swagger

        :param id: The id of this EditionError.  # noqa: E501
        :type id: int
        :param edition_id: The edition_id of this EditionError.  # noqa: E501
        :type edition_id: int
        :param error_date: The error_date of this EditionError.  # noqa: E501
        :type error_date: datetime
        :param type: The type of this EditionError.  # noqa: E501
        :type type: str
        :param error: The error of this EditionError.  # noqa: E501
        :type error: str
        :param suggested_solution: The suggested_solution of this EditionError.  # noqa: E501
        :type suggested_solution: str
        """
        self.swagger_types = {
            "id": int,
            "edition_id": int,
            "error_date": datetime,
            "type": str,
            "error": str,
            "suggested_solution": str,
        }

        self.attribute_map = {
            "id": "id",
            "edition_id": "edition_id",
            "error_date": "error_date",
            "type": "type",
            "error": "error",
            "suggested_solution": "suggested_solution",
        }
        self._id = id
        self._edition_id = edition_id
        self._error_date = error_date
        self._type = type
        self._error = error
        self._suggested_solution = suggested_solution

    @classmethod
    def from_dict(cls, dikt) -> "EditionError":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EditionError of this EditionError.  # noqa: E501
        :rtype: EditionError
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this EditionError.


        :return: The id of this EditionError.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this EditionError.


        :param id: The id of this EditionError.
        :type id: int
        """

        self._id = id

    @property
    def edition_id(self) -> int:
        """Gets the edition_id of this EditionError.


        :return: The edition_id of this EditionError.
        :rtype: int
        """
        return self._edition_id

    @edition_id.setter
    def edition_id(self, edition_id: int):
        """Sets the edition_id of this EditionError.


        :param edition_id: The edition_id of this EditionError.
        :type edition_id: int
        """

        self._edition_id = edition_id

    @property
    def error_date(self) -> datetime:
        """Gets the error_date of this EditionError.


        :return: The error_date of this EditionError.
        :rtype: datetime
        """
        return self._error_date

    @error_date.setter
    def error_date(self, error_date: datetime):
        """Sets the error_date of this EditionError.


        :param error_date: The error_date of this EditionError.
        :type error_date: datetime
        """

        self._error_date = error_date

    @property
    def type(self) -> str:
        """Gets the type of this EditionError.


        :return: The type of this EditionError.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this EditionError.


        :param type: The type of this EditionError.
        :type type: str
        """

        self._type = type

    @property
    def error(self) -> str:
        """Gets the error of this EditionError.


        :return: The error of this EditionError.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error: str):
        """Sets the error of this EditionError.


        :param error: The error of this EditionError.
        :type error: str
        """

        self._error = error

    @property
    def suggested_solution(self) -> str:
        """Gets the suggested_solution of this EditionError.


        :return: The suggested_solution of this EditionError.
        :rtype: str
        """
        return self._suggested_solution

    @suggested_solution.setter
    def suggested_solution(self, suggested_solution: str):
        """Sets the suggested_solution of this EditionError.


        :param suggested_solution: The suggested_solution of this EditionError.
        :type suggested_solution: str
        """

        self._suggested_solution = suggested_solution
